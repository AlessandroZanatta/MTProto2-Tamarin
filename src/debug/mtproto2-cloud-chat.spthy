

  rule DEBUG_CreateAuthKey:
    let
      authKey = 'g' ^ ~a ^ ~b
    in
      [ Fr(~a), Fr(~b) ]
    -->
      [
        !AuthKeyClient($Server, authKey),
        !AuthKeyServer(keyID(authKey), authKey)
      ]


  lemma LemmaCloudChatClientSendsCloudMessage:
    exists-trace
      "
        ∃ sid m authKey #i.
          ClientSendsCloudMessage(sid, m, authKey) @i
      "

  lemma LemmaCloudChatClientReceivesCloudMessage:
    exists-trace
      "
        ∃ sid m authKey #i.
          ClientReceivesCloudMessage(sid, m, authKey) @i
      "

//  lemma LemmaCloudChatClientSendsCloudMessageAfterCompromisedNonce:
//    exists-trace
//      "
//        ∃ server sid m authKey #i.
//          ClientSendsCloudMessageAfterCompromisedNonce(server, sid, m, authKey) @i
//      "

  lemma LemmaCloudChatServerReceivesCloudMessage:
    exists-trace
      "
        ∃ sid m authKey #i.
          ServerReceivesCloudMessage(sid, m, authKey) @i
      "

  lemma LemmaCloudChatServerSendsCloudMessage:
    exists-trace
      "
        ∃ sid m authKey #i.
          ServerSendsCloudMessage(sid, m, authKey) @i
      "

//  lemma LemmaCloudChatServerReceivesCloudMessageAfterCompromisedNonce:
//    exists-trace
//      "
//        ∃ server sid m authKey #i.
//          ServerReceivesCloudMessageAfterCompromisedNonce(server, sid, m, authKey) @i
//      "

  lemma LemmaCloudChatSecrecySecretAuthMsg1:
    exists-trace
      "
        ∃ sid m1 authKey #i #j.
          ClientSendsCloudMessage(sid, m1, authKey) @i ∧ 
          K(m1) @j
      "

  lemma LemmaCloudChatSecrecySecretAuthMsg2:
    exists-trace
      "
        ∃ sid m2 authKey #i #j.
          ServerSendsCloudMessage(sid, m2, authKey) @i ∧ 
          K(m2) @j
      "

//  lemma LemmaCloudChatSecrecySecretAuthMsg1:
//    exists-trace
//      "
//        ∃ sid m1 authKey #i #j.
//          ClientSendsCloudMessage(sid, m1, authKey) @i ∧ 
//          K(m1) @j
//      "
