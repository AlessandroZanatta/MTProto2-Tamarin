
  rule debug_createauthkeys:
    let
      authKey = 'g_schat' ^ ~a ^ ~b
    in
      [ Fr(~a), Fr(~b) ]
    --[ FakeAuthKey(authKey) ]->
      [ !AuthKeyClient($Server, authKey), !AuthKeyServer(keyID(authKey), authKey) ]


  lemma LemmaSecretChatInitiatorRequestsDHConfig:
    exists-trace
    "
      ∃ i #j.
        InitiatorRequestsDHConfig(i) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "

  lemma LemmaSecretChatInitiatorRequestsEncryptedChat:
    exists-trace
    "
      ∃ r chatID #j.
        InitiatorRequestsEncryptedChat(r, chatID) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "

  lemma LemmaSecretChatResponderAcceptsInitiator:
    exists-trace
    "
      ∃ r chatID #j.
        ResponderAcceptsInitiator(r, chatID) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "

  lemma LemmaSecretChatResponderHasSessionKeyForEncryptedChat:
    exists-trace
    "
      ∃ r chatID sessionKey #j.
        ResponderHasSessionKeyForEncryptedChat(r, chatID, sessionKey) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "

  lemma LemmaSecretChatSessionKeyFingerprintMatches:
    exists-trace
    "
      ∃ i chatID fp1 fp2 #j.
        SessionKeyFingerprintMatches(i, chatID, fp1, fp2) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "

  lemma LemmaSecretChatInitiatorHasSessionKeyForEncryptedChat:
    exists-trace
    "
      ∃ i chatID sessionKey #j.
        InitiatorHasSessionKeyForEncryptedChat(i, chatID, sessionKey) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "

  lemma LemmaSecretChatResponderAcceptsEncryptedChat:
    exists-trace
    "
      ∃ r chatID sessionKey #j.
        ResponderAcceptsEncryptedChat(r, chatID, sessionKey) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "

  lemma LemmaSecretChatInitiatorAcceptsEncryptedChat:
    exists-trace
    "
      ∃ i chatID sessionKey #j.
        InitiatorAcceptsEncryptedChat(i, chatID, sessionKey) @j ∧
        ¬(∃ sk #c.   CompromisedAuthKey(sk) @c) ∧
        ¬(∃ skey #c. CompromisedPrivateKey(skey) @c) ∧
        ¬(∃ n #c.    CompromisedNk(n) @c) ∧
        ¬(∃ c #c.    CompromisedClientExponent(c) @c) ∧
        ¬(∃ n c #c.  CompromisedClientEphemeralSecrets(n, c) @c) ∧
        ¬(∃ s #c.    CompromisedServerExponent(s) @c) ∧
        ¬(∃ i #c.    CompromisedSecretChatInitiatorEphemeralKey(i) @c) ∧
        ¬(∃ r #c.    CompromisedSecretChatResponderEphemeralKey(r) @c)
    "
