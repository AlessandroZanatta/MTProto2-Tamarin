

  lemma LemmaSecretChatInitiatorRequestsDHConfig:
    exists-trace
    "
      ∃ i iUser #j.
        InitiatorRequestsDHConfig(i, iUser) @j
    "

  lemma LemmaSecretChatInitiatorRequestsEncryptedChat:
    exists-trace
    "
      ∃ r chatID iUser rUser #j.
        InitiatorRequestsEncryptedChat(r, chatID, iUser, rUser) @j
    "

  lemma LemmaSecretChatResponderAcceptsInitiator:
    exists-trace
    "
      ∃ r chatID iUser rUser #j.
        ResponderAcceptsInitiator(r, chatID, iUser, rUser) @j
    "

  lemma LemmaSecretChatResponderHasSessionKeyForEncryptedChat:
    exists-trace
    "
      ∃ r chatID sessionKey iUser rUser #j.
        ResponderHasSessionKeyForEncryptedChat(r, chatID, iUser, rUser, sessionKey) @j
    "

  lemma LemmaSecretChatSessionKeyFingerprintMatches:
    exists-trace
    "
      ∃ i chatID fp1 fp2 iUser rUser #j.
        SessionKeyFingerprintMatches(i, chatID, iUser, rUser, fp1, fp2) @j
    "

  lemma LemmaSecretChatInitiatorHasSessionKeyForEncryptedChat:
    exists-trace
    "
      ∃ i chatID sessionKey iUser rUser #j.
        InitiatorHasSessionKeyForEncryptedChat(i, chatID, iUser, rUser, sessionKey) @j
    "

  lemma LemmaSecretChatResponderAcceptsEncryptedChat:
    exists-trace
    "
      ∃ r chatID sessionKey iUser rUser #j.
        ResponderAcceptsEncryptedChat(r, chatID, iUser, rUser, sessionKey) @j
    "

  lemma LemmaSecretChatInitiatorAcceptsEncryptedChat:
    exists-trace
    "
      ∃ i chatID sessionKey iUser rUser  #j.
        InitiatorAcceptsEncryptedChat(i, chatID, iUser, rUser, sessionKey) @j
    "

  lemma LemmaSecretChatClientSendsSecretChatMsg:
    exists-trace
    "
      ∃ i chatID sessionKey authKey iUser rUser  #j.
        ClientSendsSecretChatMsg(i, chatID, iUser, rUser, sessionKey, authKey) @j
    "

  lemma LemmaSecretChatClientReceivesSecretChatMsg:
    exists-trace
    "
      ∃ i chatID sessionKey authKey iUser rUser  #j.
        ClientReceivesSecretChatMsg(i, chatID, iUser, rUser, sessionKey, authKey) @j
    "