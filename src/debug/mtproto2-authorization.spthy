
  /* Expected result: true */
  lemma LemmaAuthClientStartsSession:
    exists-trace
    "
      ∃ X Y nc #i.
        ClientStartsSession(X, Y, nc) @i
    "

  /* Expected result: true */
  lemma LemmaAuthClientGetsServerPublicKey:
    exists-trace
    "
      ∃ X Y k #i.
        ClientGetsServerPublicKey(X, Y, k) @i
    "

  /* Expected result: true */
  lemma LemmaAuthClientRequestsDHParameters:
    exists-trace
    "
      ∃ X Y nc ns nk #i.
        ClientRequestsDHParameters(X, Y, nc, ns, nk) @i
    "

  /* Expected result: true */
  lemma LemmaAuthClientReceivesDHParameters:
    exists-trace
    "
      ∃ X Y nc ns nk p g g_s #i.
        ClientReceivesDHParameters(X, Y, nc, ns, nk, p, g, g_s) @i
    "
  
  /* Expected result: true */
  lemma LemmaAuthClientChecksDHParametersTrue:
    exists-trace
    "
      ∃ p g half #i.
        ClientChecksDHParameters(p, g, half) @i ∧
        (
          ¬(p = WEAK_MODULO) ∧
          ¬(g = BAD_ELEMENT) ∧
          ¬(half = BAD_ELEMENT)
        )
    "  

  /* Expected result: true */
  lemma LemmaAuthClientChecksDHParametersFalse:
    exists-trace
    "
      ∃ p g half #i.
        ClientChecksDHParameters(p, g, half) @i ∧
        (
          (p = WEAK_MODULO) ∨ 
          (g = BAD_ELEMENT) ∨
          (half = BAD_ELEMENT)
        )
    "   

  /* Expected result: true */
  lemma LemmaAuthClientEndsDHExchange:
    exists-trace
    "
      ∃ X Y nc ns nk p g g_s g_a authKey #i.
        ClientEndsDHExchange(X, Y, nc, ns, nk, p, g, g_s, g_a, authKey) @i
    "  

  /* Expected result: true */
  lemma LemmaAuthClientAcceptsAuthKey:
    exists-trace
    "
      ∃ X Y nc ns authKey #i.
        ClientAcceptsAuthKey(X, Y, nc, ns, authKey) @i
    "  

  /* Expected result: true */
  lemma LemmaAuthClientReceivesAck:
    exists-trace
    "
      ∃ X Y nc ns #i.
        ClientReceivesAck(X, Y, nc, ns) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerReceivesRequest:
    exists-trace
    "
      ∃ X nc #i.
        ServerReceivesRequest(X, nc) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerNonceRandomOrFixedIsRandom:
    exists-trace
    "
      ∃ pid ns #i.
        ServerNonceRandomOrFixed(pid, ns) @i ∧
        ¬(ns = 'FIXED_NS')
    "

  /* Expected result: true */
  lemma LemmaAuthServerNonceRandomOrFixedIsFixed:
    exists-trace
    "
      ∃ pid ns #i.
        ServerNonceRandomOrFixed(pid, ns) @i ∧
        ns = 'FIXED_NS'
    "

  /* Expected result: true */
  lemma LemmaAuthServerAcceptsClient:
    exists-trace
    "
      ∃ X nc ns nk #i.
        ServerAcceptsClient(X, nc, ns, nk) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerSendsDHParameters:
    exists-trace
    "
      ∃ X nc ns nk p g g_s #i.
        ServerSendsDHParameters(X, nc, ns, nk, p, g, g_s) @i
    "
  /* Expected result: true */
  lemma LemmaAuthServerEndsDHExchange:
    exists-trace
    "
      ∃ X nc ns nk p g g_a authKey #i.
        ServerEndsDHExchange(X, nc, ns, nk, p, g, g_a, authKey) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerAcceptsAuthKey:
    exists-trace
    "
      ∃ X nc ns authKey #i.
        ServerAcceptsAuthKey(X, nc, ns, authKey) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerSendsAck:
    exists-trace
    "
      ∃ X nc ns nk #i.
        ServerSendsAck(X, nc, ns, nk) @i
    "

  /* Expected result: true */
  lemma LemmaAuthForgedServerIdentity:
    exists-trace
    "
      ∃ X #i.
        ForgedServerIdentity(X) @i
    "

  /* Expected result: true */
  lemma LemmaAuthCompromisedRSAKey:
    exists-trace
    "
      ∃ k #i.
        CompromisedRSAKey(k) @i
    "

  /* Expected result: true */
  lemma LemmaAuthCompromisedNonce:
    exists-trace
    "
      ∃ nk #i.
        CompromisedNonce(nk) @i
    "

  /* Expected result: true */
  lemma LemmaAuthPostCompromisedRSAKey:
    exists-trace
    "
      ∃ s k #i.
        PostCompromisedRSAKey(s, k) @i
    "

  /* Expected result: true */
  lemma LemmaAuthPostCompromisedNonce:
    exists-trace
    "
      ∃ nk #i. 
        PostCompromisedNonce(nk) @i
    " 

  /* Expected result: true */
  lemma LemmaAuthPostCompromisedAuthKey:
    exists-trace
    "
      ∃ authKey #i.
        PostCompromisedAuthKey(authKey) @i
    " 

  /* Expected result: true */
  lemma LemmaAuthFixedNonceCanBeReUsed:
    "
      ∀ p1 p2 n #i #j.
        ServerNonceRandomOrFixed(p1, n) @i ∧ 
        ServerNonceRandomOrFixed(p2, n) @j ∧
        (n = 'FIXED_NS') ∧
        (n = 'FIXED_NS')
        ==>
        (p1 = p2)
    "

  /* Expected result: true */
  lemma LemmaAuthPostCompromiseNkImpliesOthersCompromised:
    "
      ¬( 
        ∀ nk #i.
          PostCompromisedNonce(nk) @i
          ==>
          ( 
            (∃ #j. CompromisedNonce(nk) @j) ∨
            (∃ sk #k. CompromisedRSAKey(sk) @k) ∨
            (∃ authKey #l. PostCompromisedAuthKey(authKey) @l)
          )
      )
    "
