  
  /* Expected result: True */
  lemma LemmaAuthClientStartsSession:
    exists-trace
    "
      ∃ nc #i.
        ClientStartsSession(nc) @i
    "

  lemma LemmaAuthServerReceivesRequest:
    exists-trace
    "
      ∃ nc #i.
        ServerReceivesRequest(nc) @i
    " 
  
  lemma LemmaAuthServerGeneratesNonceIsRandom:
    exists-trace
    "
      ∃ ns #i.
        ServerGeneratesNonce(ns) @i ∧ ¬(ns = 'FIXED_NS')
    "

  lemma LemmaAuthServerGeneratesNonceIsFixed:
    exists-trace
    "
      ∃ ns #i.
        ServerGeneratesNonce(ns) @i ∧ (ns = 'FIXED_NS')
    "

  lemma LemmaAuthClientGetsServerPublicKey:
    exists-trace
    "
      ∃ pkey #i.
        ClientGetsServerPublicKey(pkey) @i
    " 

  lemma LemmaAuthClientRequestsDHParameters:
    exists-trace
    "
      ∃ nc ns nk #i.
        ClientRequestsDHParameters(nc, ns, nk) @i
    "

  lemma LemmaAuthServerAcceptsClient:
    exists-trace
    "
      ∃ nc ns nk #i.
        ServerAcceptsClient(nc, ns, nk) @i
    "

  lemma LemmaAuthServerSendsDHParameters:
    exists-trace
    "
      ∃ nc ns nk half #i.
        ServerSendsDHParameters(nc, ns, nk, half) @i
    "

  lemma LemmaAuthClientReceivesDHParameters:
    exists-trace
    "
      ∃ nc ns nk half #i.
        ClientReceivesDHParameters(nc, ns, nk, half) @i
    "

  lemma LemmaAuthClientAcceptsDHParameters:
    exists-trace
    "
      ∃ nc ns nk half #i.
        ClientAcceptsDHParameters(nc, ns, nk, half) @i
    "

  lemma LemmaAuthClientEndsDHExchange:
    exists-trace
    "
      ∃ nc ns nk g_s c authKey #i.
        ClientEndsDHExchange(nc, ns, nk, g_s, c, authKey) @i
    "

  lemma LemmaAuthClientAcceptsAuthKey:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ClientAcceptsAuthKey(nc, ns, nk, authKey) @i
    "

  lemma LemmaAuthServerEndsDHExchange:
    exists-trace
    "
      ∃ nc ns nk g_c authKey #i.
        ServerEndsDHExchange(nc, ns, nk, g_c, authKey) @i
    "

  lemma LemmaAuthServerAcceptsAuthKey:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ServerAcceptsAuthKey(nc, ns, nk, authKey) @i
    "

  lemma LemmaAuthServerSendsAck:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ServerSendsAck(nc, ns, nk, authKey) @i
    "
  
  /*
   * This lemma takes more time to prove the more capabilities
   * the attacker is given (and is free to use).
   *
   * Adding restrictions on the capabilities to lemmas using this 
   * fact should prove beneficial time-wise.
   */
  lemma LemmaAuthClientReceivesAck:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ClientReceivesAck(nc, ns, nk, authKey) @i
    "
  
  lemma LemmaAuthRegisteredAuthKey:
    exists-trace
    "
      ∃ authKey #i.
        RegisteredAuthKey(authKey) @i
    "

  lemma LemmaAuthCompromisedAuthKey:
    exists-trace
    "
      ∃ authKey #i.
        CompromisedAuthKey(authKey) @i
    "

  lemma LemmaAuthCompromisedPrivateKey:
    exists-trace
    "
      ∃ skey #i.
        CompromisedPrivateKey(skey) @i
    "

  lemma LemmaAuthCompromisedNk:
    exists-trace
    "
      ∃ nk #i.
        CompromisedNk(nk) @i
    "
  
  lemma LemmaAuthCompromisedClientExponent:
    exists-trace
    "
      ∃ c #i.
        CompromisedClientExponent(c) @i
    "


  lemma LemmaAuthCompromisedClientEphemeralSecrets:
    exists-trace
    "
      ∃ nk c #i.
        CompromisedClientEphemeralSecrets(nk, c) @i
    "


  lemma LemmaAuthCompromisedServerExponent:
    exists-trace
    "
      ∃ s #i.
        CompromisedServerExponent(s) @i
    "
  

  lemma LemmaAuthPostCompromisedPrivateKey:
    exists-trace
    "
      ∃ skey #i.
        PostCompromisedPrivateKey(skey) @i
    "



  lemma LemmaAuthPostCompromisedNonce:
    exists-trace
    "
      ∃ nk #i.
        PostCompromisedNonce(nk) @i
    "

  
  lemma LemmaAuthPostCompromisedClientExponent:
    exists-trace
    "
      ∃ c #i.
        PostCompromisedClientExponent(c) @i
    "
  
  lemma LemmaAuthPostCompromisedServerExponent:
    exists-trace
    "
      ∃ s #i.
        PostCompromisedServerExponent(s) @i
    "