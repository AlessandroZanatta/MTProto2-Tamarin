
  /* Expected result: true */
  lemma LemmaAuthClientStartsSession:
    exists-trace
    "
      ∃ nc #i.
        ClientStartsSession(nc) @i
    "

  /* Expected result: true */
  lemma LemmaAuthClientGetsServerPublicKey:
    exists-trace
    "
      ∃ k #i.
        ClientGetsServerPublicKey(k) @i
    "

  /* Expected result: true */
  lemma LemmaAuthClientRequestsDHParameters:
    exists-trace
    "
      ∃ nc ns nk #i.
        ClientRequestsDHParameters(nc, ns, nk) @i
    "

  /* Expected result: true */
  lemma LemmaAuthClientReceivesDHParameters:
    exists-trace
    "
      ∃ nc ns nk g_s #i.
        ClientReceivesDHParameters(nc, ns, nk, g_s) @i
    "
  
//  /* Expected result: true */
//  lemma LemmaAuthClientChecksDHParametersTrue:
//    exists-trace
//    "
//      ∃ p g half #i.
//        ClientChecksDHParameters(p, g, half) @i ∧
//        (
//          ¬(p = WEAK_MODULO) ∧
//          ¬(g = BAD_ELEMENT) ∧
//          ¬(half = BAD_ELEMENT)
//        )
//    "  
//
//  /* Expected result: true */
//  lemma LemmaAuthClientChecksDHParametersFalse:
//    exists-trace
//    "
//      ∃ p g half #i.
//        ClientChecksDHParameters(p, g, half) @i ∧
//        (
//          (p = WEAK_MODULO) ∨ 
//          (g = BAD_ELEMENT) ∨
//          (half = BAD_ELEMENT)
//        )
//    "   

  /* Expected result: true */
  lemma LemmaAuthClientEndsDHExchange:
    exists-trace
    "
      ∃ nc ns nk g_s g_a authKey #i.
        ClientEndsDHExchange(nc, ns, nk, g_s, g_a, authKey) @i
    "  

  /* Expected result: true */
  lemma LemmaAuthClientAcceptsAuthKey:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ClientAcceptsAuthKey(nc, ns, nk, authKey) @i
    "  

  /* Expected result: true */
  lemma LemmaAuthClientReceivesAck:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ClientReceivesAck(nc, ns, nk, authKey) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerReceivesRequest:
    exists-trace
    "
      ∃ nc #i.
        ServerReceivesRequest(nc) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerGeneratesNonceIsRandom:
    exists-trace
    "
      ∃ ns #i.
        ServerGeneratesNonce(ns) @i ∧
        ¬(ns = 'FIXED_NS')
    "

  /* Expected result: true */
  lemma LemmaAuthServerGeneratesNonceIsFixed:
    exists-trace
    "
      ∃ ns #i.
        ServerGeneratesNonce(ns) @i ∧
        ns = 'FIXED_NS'
    "

  /* Expected result: true */
  lemma LemmaAuthServerAcceptsClient:
    exists-trace
    "
      ∃ nc ns nk #i.
        ServerAcceptsClient(nc, ns, nk) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerSendsDHParameters:
    exists-trace
    "
      ∃ nc ns nk g_s #i.
        ServerSendsDHParameters(nc, ns, nk, g_s) @i
    "
  /* Expected result: true */
  lemma LemmaAuthServerEndsDHExchange:
    exists-trace
    "
      ∃ nc ns nk g_a authKey #i.
        ServerEndsDHExchange(nc, ns, nk, g_a, authKey) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerAcceptsAuthKey:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ServerAcceptsAuthKey(nc, ns, nk, authKey) @i
    "

  /* Expected result: true */
  lemma LemmaAuthServerSendsAck:
    exists-trace
    "
      ∃ nc ns nk authKey #i.
        ServerSendsAck(nc, ns, nk, authKey) @i
    "

  /* Expected result: true */
  lemma LemmaAuthRevealedRSAKey:
    exists-trace
    "
      ∃ k #i.
        RevealedRSAKey(k) @i
    "

  /* Expected result: true */
  lemma LemmaAuthRevealedNk:
    exists-trace
    "
      ∃ nk #i.
        RevealedNk(nk) @i
    "

  lemma LemmaRevealedAuthProtClientExponent:
    exists-trace
      "
        ∃ b #i.
          RevealedAuthProtClientExponent(b) @i
      "

  lemma LemmaRevealedAuthProtClientEphemeralSecrets:
    exists-trace
      "
        ∃ nk b #i.
          RevealedAuthProtClientEphemeralSecrets(nk, b) @i
      "

  lemma LemmaRevealedAuthProtServerExponent:
      exists-trace
        "
          ∃ a #i.
            RevealedAuthProtServerExponent(a) @i
        "
//  /* Expected result: true */
//  lemma LemmaAuthPostCompromisedRSAKey:
//    exists-trace
//    "
//      ∃ k #i.
//        PostCompromisedRSAKey(k) @i
//    "
//
//  /* Expected result: true */
//  lemma LemmaAuthPostCompromisedNonce:
//    exists-trace
//    "
//      ∃ nk #i. 
//        PostCompromisedNonce(nk) @i
//    "
//  lemma LemmaAuthRevealedAuthKey:
//    exists-trace
//      "
//        ∃ authKey #i.
//          RevealedAuthKey(authKey) @i
//      "

//  /* Expected result: true */
//  lemma LemmaAuthPostCompromisedAuthKey:
//    exists-trace
//    "
//      ∃ authKey #i.
//        PostCompromisedAuthKey(authKey) @i
//    " 

  /* Expected result: true */
  lemma LemmaAuthFixedNonceCanBeReUsed:
    "
      ∀ n #i #j.
        ServerGeneratesNonce(n) @i ∧ 
        ServerGeneratesNonce(n) @j ∧
        ¬(n = 'FIXED_NS')
        ==>
        #i = #j
    "

//  /* Expected result: true */
//  lemma LemmaAuthPostCompromiseNkImpliesOthersCompromised:
//    "
//      ¬( 
//        ∀ nk #i.
//          PostCompromisedNonce(nk) @i
//          ==>
//          ( 
//            (∃ #j. RevealedNk(nk) @j) ∨
//            (∃ sk #k. RevealedRSAKey(sk) @k) 
//            // ∨ (∃ authKey #l. K(authKey) @l)
//          )
//      )
//    "
