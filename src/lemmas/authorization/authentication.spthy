/*****************************************************************/
/* Authentication client to server                               */
/*****************************************************************/

/*
 * There is no authentication of the client to the server. This is 
 * to be expected as the server is willing to run an instance of the 
 * protocol with anyone, including the attacker.
 *
 * Expected result: False
 * Estimated time: ~10 seconds
 */
  lemma LemmaAuthProtAuthClientToServer:
    "
      ∀ nc ns nk authKey #i #j.
        /* Whenever a client has started a session with nonce nc */
        ClientStartsSession(nc) @i ∧

        /* and the server has sent an ACK for the session <nc, ns> */
        ServerSendsAck(nc, ns, nk, authKey) @j ∧

        /* and no secret was leaked */          
        ¬(∃ sk #r.   CompromisedAuthKey(sk) @r) ∧
        ¬(∃ skey #r. CompromisedPrivateKey(skey) @r) ∧
        ¬(∃ n #r.    CompromisedNk(n) @r) ∧
        ¬(∃ c #r.    CompromisedClientExponent(c) @r) ∧
        ¬(∃ s #r.    CompromisedServerExponent(s) @r)
        ==>
        (
          /* then a client has shared an authKey with the server */
          (
            ∃ #k.
            ClientAcceptsAuthKey(nc, ns, nk, authKey) @k
          ) ∨

          /* 
           * or the server is actually running two different instances
           * of the protocol with the client
           */
          (
            ∃ #k #l.
              ServerGeneratesNonce(ns) @k ∧
              ServerGeneratesNonce(ns) @l ∧
              ¬(#k = #l)
          )
        )
    "

  /*
   * However, at the end of the authorization protocol the server knows
   * for sure that the client that has negotiated the authorization key authKey
   * is the client who sent the third message of the protocol.
   *
   * Expected result: True
   * Estimated time: ~10 seconds
   */
  lemma LemmaAuthProtAuthClientSentThirdMessage:
    "
      ∀ nc ns nk authKey #i #j.
        /* Whenever a client requested DH parameters in session <nc, ns> */
        ClientRequestsDHParameters(nc, ns, nk) @i ∧

        /* and the server ended the protocol correctly */
        ServerSendsAck(nc, ns, nk, authKey) @j ∧
        
        /* and no secret was leaked */
        ¬(∃ sk #r.   CompromisedAuthKey(sk) @r) ∧
        ¬(∃ skey #r. CompromisedPrivateKey(skey) @r) ∧
        ¬(∃ n #r.    CompromisedNk(n) @r) ∧
        ¬(∃ c #r.    CompromisedClientExponent(c) @r) ∧
        ¬(∃ s #r.    CompromisedServerExponent(s) @r)
        ==>
        (
          /* then the client has succesfully shared a key with the server */
          (
            ∃ #k.
            ClientAcceptsAuthKey(nc, ns, nk, authKey) @k
          ) ∨

          /* 
           * or the server is actually running two different instances
           * of the protocol with the client
           */
          (
            ∃ #k #l.
              ServerGeneratesNonce(ns) @k ∧
              ServerGeneratesNonce(ns) @l ∧
              ¬(#k = #l)
          )
        )
    "

/*****************************************************************/
/* Authentication server to client                               */
/*****************************************************************/


  /*
   * There is authentication of the server to the client (if the server
   * does not reuse its server nonce).
   *
   * Expected result: True
   * Estimated time: ~10 seconds
   */
  lemma LemmaAuthProtAuthServerToClient:
    "
      ∀ nc ns nk authKey #i.
        /* Whenever a client receives an ACK from the server */
        ClientReceivesAck(nc, ns, nk, authKey) @i ∧
        
        /* and no secret was leaked */
        ¬(∃ sk #r.   CompromisedAuthKey(sk) @r) ∧
        ¬(∃ skey #r. CompromisedPrivateKey(skey) @r) ∧
        ¬(∃ n #r.    CompromisedNk(n) @r) ∧
        ¬(∃ c #r.    CompromisedClientExponent(c) @r) ∧
        ¬(∃ s #r.    CompromisedServerExponent(s) @r)
        ==>
        (
          /* 
           * then there is a session matching it on the server
           *
           * Note: Trying to prove injectivity seems to make Tamarin use huge
           * amounts of RAM (~12-16 GB) in a very short period of time (~30/40 seconds).
           * Be careful if you uncomment the injectivity check.
           */
          ( 
            ∃ #j1.
            ServerAcceptsAuthKey(nc, ns, nk, authKey) @j1 
            // ∧
            // ¬(
            //   ∃ #j2.
            //     ServerAcceptsAuthKey(nc, ns, nk, authKey) @j2 ∧
            //     ¬(#j1 = #j2)
            // )
          ) ∨

          /* or the server has reused the same nonce */
          (
            ∃ #j1 #j2.
              ServerGeneratesNonce(ns) @j1 ∧
              ServerGeneratesNonce(ns) @j2 ∧
              ¬(#j1 = #j2)
          )
        )
    "
