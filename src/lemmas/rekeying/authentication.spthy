

  /*
   * TODO: this lemma actually holds. Is this an error in the model or what???
   *
   * Expected result: False
   * Estimated time: N/A
   */
  lemma LemmaRekeyingAuthentication_1:
    "
      ∀ exchangeID iUser1 iUser2 rUser1 rUser2 newKey #i #j.
        /* Whenever two users negotiate the same key in the same session */
        InitiatorHasNegotiatedNewKey(exchangeID, iUser1, rUser1, newKey) @i ∧
        ResponderHasNegotiatedNewKey(exchangeID, iUser2, rUser2, newKey) @j ∧

        /* and no secret was revealed */
        // ¬(∃ x #r. RegisteredSessionKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingInitiatorEphemeralKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingResponderEphemeralKey(x) @r)
        ==>
        (
          /* then there are actually only two users involved */
          iUser1 = iUser2 ∨
          iUser1 = rUser2 ∨
          rUser1 = iUser2 ∨
          rUser1 = rUser2
        )
    "


  /*
   * Expected result: True
   * Estimated time: ~10 seconds
   */
  lemma LemmaRekeyingAuthentication_2:
    "
      ∀ Alice Bob exchangeID1 exchangeID2 iUser rUser newKey #i #j #ab.
        /* 
         * Whenever an honest initiator iUser accepts a new key with Bob in
         * a session, and an honest responder rUser accepts the same key with
         * Alice in another session
         */
        AliceAndBob(Alice, Bob) @ab ∧
        InitiatorHasNegotiatedNewKey(exchangeID1, iUser, Bob, newKey) @i ∧
        ResponderHasNegotiatedNewKey(exchangeID2, Alice, rUser, newKey) @j ∧
        
        /* and no secret was revealed */
        // ¬(∃ x #r. RegisteredSessionKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingInitiatorEphemeralKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingResponderEphemeralKey(x) @r)
        ==>
        (
          /* then the session is the same */
          exchangeID1 = exchangeID2 ∧

          /* and the initiator is Alice */
          iUser = Alice ∧

          /* and the responder is Bob */
          rUser = Bob
        )
    "

  /*
   * TODO: actual result if False! Find the problem
   *
   * Expected result: True
   * Estimated time: N/A
   */
  lemma LemmaRekeyingAuthentication_3:
    "
      ∀ Alice Bob exchangeID rUser newKey #i #ab.
        /* 
         * Whenever an honest responder ends up accepting a new key after
         * a rekeying session exchangeID with 'Alice'
         */
        AliceAndBob(Alice, Bob) @ab ∧
        ResponderHasNegotiatedNewKey(exchangeID, Alice, rUser, newKey) @i ∧

        /* and no secret was revealed */
        // ¬(∃ x #r. RegisteredSessionKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingInitiatorEphemeralKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingResponderEphemeralKey(x) @r)
        ==>
        (
          /* 
           * then it was 'Alice' who started session exchangeID and computed
           * the new key
           */
          (
            ∃ #j1.
              InitiatorHasNegotiatedNewKey(exchangeID, Alice, rUser, newKey) @j1
              /* injectivity */
              // ∧ ¬(
              //   ∃ #j2.
              //     InitiatorHasNegotiatedNewKey(exchangeID, 'Alice', rUser, newKey) @j2 ∧
              //     ¬(#j1 = #j2)
              // )
          ) ∨

          /*
           * or rUser himself started session exchangeID with 'Alice' and his
           * messages were reflected back by the attacker in a parallel session
           * with the same exchange id
           */
          (
            ∃ #j1.
              InitiatorHasNegotiatedNewKey(exchangeID, rUser, Alice, newKey) @j1
              /* injectivity */
              // ∧ ¬(
              //   ∃ #j2.
              //     InitiatorHasNegotiatedNewKey(exchangeID, rUser, 'Alice', newKey) @j2 ∧
              //     ¬(#j1 = #j2)
              // )
          )
        )
    "

  /*
   * Expected result: True
   * Estimated time: N/A
   */
  lemma LemmaRekeyingAuthentication_4:
    "
      ∀ Alice Bob rID sender exchangeID rUser newKey msg #i #ab.

        AliceAndBob(Alice, Bob) @ab ∧
        ClientReceivesMessageWithNewKey(rID, sender, exchangeID, Alice, rUser, newKey, msg) @i ∧

        /* and no secret was revealed */
        // ¬(∃ x #r. RegisteredSessionKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingInitiatorEphemeralKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingResponderEphemeralKey(x) @r)
        ==>
        (
          (
            ∃ iID Y #j.
              ClientSendsMessageWithNewKey(iID, Y, exchangeID, Alice, rUser, newKey, msg) @j
          ) ∨
          (
            ∃ iID Y #j.
              ClientSendsMessageWithNewKey(iID, Y, exchangeID, rUser, Alice, newKey, msg) @j
          )
        )
    "

  /*
   * Expected result: True
   * Estimated time: N/A
   */
  lemma LemmaRekeyingAuthentication_5:
    "
      ∀ Alice Bob rID sender exchangeID iUser newKey msg #i #ab.

        AliceAndBob(Alice, Bob) @ab ∧
        ClientReceivesMessageWithNewKey(rID, sender, exchangeID, iUser, Alice, newKey, msg) @i ∧

        /* and no secret was revealed */
        // ¬(∃ x #r. RegisteredSessionKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingInitiatorEphemeralKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingResponderEphemeralKey(x) @r)
        ==>
        (
          (
            ∃ iID Y #j.
              ClientSendsMessageWithNewKey(iID, Y, exchangeID, Alice, iUser, newKey, msg) @j
          ) ∨
          (
            ∃ iID Y #j.
              ClientSendsMessageWithNewKey(iID, Y, exchangeID, iUser, Alice, newKey, msg) @j
          )
        )
    "

  /*
   * Expected result: False
   * Estimated time: N/A
   */
  lemma LemmaRekeyingAuthentication_6:
    "
      ∀ Alice Bob iID rID X Y exchangeID iUser rUser newKey msg #i #j #ab.

        AliceAndBob(Alice, Bob) @ab ∧
        ClientSendsMessageWithNewKey(iID, X, exchangeID, Alice, rUser, newKey, msg) @i ∧
        ClientReceivesMessageWithNewKey(rID, Y, exchangeID, iUser, Bob, newKey, msg) @j ∧

        /* and no secret was revealed */
        // ¬(∃ x #r. RegisteredSessionKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingInitiatorEphemeralKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingResponderEphemeralKey(x) @r)
        ==>
        ( iUser = Alice ∧ rUser = Bob)
    "

  /*
   * Ditto of the previous, with inverted roles.
   *
   * Expected result: False
   * Estimated time: N/A
   */
  lemma LemmaRekeyingAuthentication_7:
    "
      ∀ Alice Bob iID rID X Y exchangeID iUser rUser newKey msg #i #j #ab.

        AliceAndBob(Alice, Bob) @ab ∧
        ClientSendsMessageWithNewKey(iID, X, exchangeID, Bob, rUser, newKey, msg) @i ∧
        ClientReceivesMessageWithNewKey(rID, Y, exchangeID, iUser, Alice, newKey, msg) @j ∧

        /* and no secret was revealed */
        // ¬(∃ x #r. RegisteredSessionKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingInitiatorEphemeralKey(x) @r) ∧
        ¬(∃ x #r. CompromisedRekeyingResponderEphemeralKey(x) @r)
        ==>
        ( iUser = Bob ∧ rUser = Alice)
    "