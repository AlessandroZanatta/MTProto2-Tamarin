

  /*
   * If a client X (one of I or R) receives a message m encrypted 
   * with a session key sessionKey in a chat session chatID, then 
   * such message was sent by the other party, unless they skip some
   * mandatory check.
   *
   * NOTE: we cannot force chatID1 = chatID2, because the chat session 
   * identifier is available to the server/attacker, who is free to 
   * change it when forwarding messages.
   *
   * Expected result: True
   * Estimated time: ~1 minute
   */
  lemma LemmaSecretChatAuthentication1:
    "
      ∀ chatID1 X iUser rUser msg sessionKey #i.

        /* Whenever a client received a secret chat message */
        ClientReceivesSecretChatMsg(chatID1, X, iUser, rUser, sessionKey, msg) @i ∧

        /* and no secret was leaked */
        ¬(∃ z #r. CompromisedSecretChatInitiatorEphemeralKey(z) @r) ∧
        ¬(∃ z #r. CompromisedSecretChatResponderEphemeralKey(z) @r)
        ==>
        (
          /* then it was sent by another (honest) client */
          (∃ Y chatID2 #r. 
            ClientSendsSecretChatMsg(chatID2, Y, iUser, rUser, sessionKey, msg) @r) ∨
          (∃ Y chatID2 #r. 
            ClientSendsSecretChatMsg(chatID2, Y, rUser, iUser, sessionKey, msg) @r) ∨

          /* or clients involved had skipped the QR validation */
          (
            ∃ Y xID yID #r1 #r2. 
              OutOfBandKeyComparisonSkipped(xID, X, sessionKey) @r1 ∧
              OutOfBandKeyComparisonSkipped(yID, Y, sessionKey) @r2
          )
        )
    "


  /*
   * If an (honest) initiator negotiates a key sessionKey and an
   * (honest) responder accepts a key sessionKey, then the initiator is
   * Alice and the responder is Bob.
   *
   * Expected result: True
   * Estimated time: ~10 seconds
   */
  lemma LemmaSecretChatAuthentication2:
    "
      ∀ aID bID chatID iUser rUser sessionKey Alice Bob #i #j #ab.
        AliceAndBob(Alice, Bob) @ab ∧

        /* 
         * Whenever the initiator has accepted a chat with Bob and
         * the responder has accepted a chat with Alice (both in the
         * same session and with the same key)
         */
        InitiatorAcceptsEncryptedChat(aID, chatID, iUser, Bob, sessionKey) @i ∧
        ResponderAcceptsEncryptedChat(bID, chatID, Alice, rUser, sessionKey) @j ∧

        /* and no secret was leaked */
        ¬(∃ z #r. CompromisedSecretChatInitiatorEphemeralKey(z) @r) ∧
        ¬(∃ z #r. CompromisedSecretChatResponderEphemeralKey(z) @r)
        ==>
        (
          /* then the initiator is Alice and the responder is Bob */
          (
            iUser = Alice ∧ rUser = Bob
          ) ∨

          /* or clients skipped the QR validation */
          (
            ∃ #r1 #r2. 
              OutOfBandKeyComparisonSkipped(aID, iUser, sessionKey) @r1 ∧
              OutOfBandKeyComparisonSkipped(bID, rUser, sessionKey) @r2
          )
        )
    "


  /*
   * Variant of the above lemma.
   *
   * Expected result: True
   * Estimated time: ~10 seconds
   */
  lemma LemmaSecretChatAuthentication3:
    "
      ∀ aID bID chatID iUser rUser sessionKey Alice Bob #i #j #ab.
        AliceAndBob(Alice, Bob) @ab ∧

        /* 
         * Whenever the initiator has accepted a chat with Bob and
         * the responder has accepted a chat with Alice (both in the
         * same session and with the same key)
         */
        InitiatorAcceptsEncryptedChat(aID, chatID, iUser, Bob, sessionKey) @i ∧
        ResponderAcceptsEncryptedChat(bID, chatID, Alice, rUser, sessionKey) @j ∧

        /* and no secret was leaked */
        ¬(∃ z #r. CompromisedSecretChatInitiatorEphemeralKey(z) @r) ∧
        ¬(∃ z #r. CompromisedSecretChatResponderEphemeralKey(z) @r)
        ==>
        (
          /* then the initiator is Alice and the responder is Bob */
          (
            iUser = Alice ∧ rUser = Bob
          ) ∨
          (
            ∃ x1 x2 #r. 
              OutOfBandKeyComparisonSkipped(x1, x2, sessionKey) @r
          )
        )
    "


  /*
   * More generally, if an (honest) initiator iUser1 negotiates a 
   * session key sessionKey to chat with rUser1, and an (honest) 
   * responder rUser2 negotiates the same key sessionKey to chat
   * with iUser2, then there are only two parties involved, unless 
   * the clients skip the out-of-band validation of sessionKey.
   *
   * Expected result: True
   * Estimated time: ~10 seconds
   */
  lemma LemmaSecretChatAuthentication4:
    "
      ∀ aID bID chatID1 chatID2 iUser1 iUser2 rUser1 rUser2 sessionKey #i #j.

        /*
         * Whenever an initiator and responder have both accepted the same
         * session key sessionKey
         */
        InitiatorAcceptsEncryptedChat(aID, chatID1, iUser1, rUser1, sessionKey) @i ∧
        ResponderAcceptsEncryptedChat(bID, chatID2, iUser2, rUser2, sessionKey) @j ∧

        /* and no secret was leaked */
        ¬(∃ z #r. CompromisedSecretChatInitiatorEphemeralKey(z) @r) ∧
        ¬(∃ z #r. CompromisedSecretChatResponderEphemeralKey(z) @r)
        ==>
        (
          /* 
           * then these two clients are actually the two involved in the
           * session key sessionKey negotiation 
           */
          ( iUser1 = iUser2 ∧ rUser1 = rUser2 ) ∨
          ( iUser1 = rUser2 ∧ rUser1 = iUser2 ) ∨

          /* or they skipped QR validation */
          (
            ∃ x1 x2 #r. 
              OutOfBandKeyComparisonSkipped(x1, x2, sessionKey) @r
          )
        )
    "


  /*
   * If all clients validate their keys and check their DH parameters, then we
   * can prove something stronger: if an (honest) initiator iUser1 negotiates a
   * session key sessionKey to chat with rUser1, and an (honest) responder rUser2
   * negotiates the same key sessionKey to chat with iUser2, then there are only
   * two parties involved, and in particular iUser1 = iUser2 and rUser1 = rUser2.
   */
  lemma LemmaSecretChatAuthentication5:
    "
      ∀ aID bID chatID1 chatID2 iUser1 iUser2 rUser1 rUser2 sessionKey #i #j.
        InitiatorAcceptsEncryptedChat(aID, chatID1, iUser1, rUser1, sessionKey) @i ∧
        ResponderAcceptsEncryptedChat(bID, chatID2, iUser2, rUser2, sessionKey) @j ∧

        /* and no secret was leaked */
        ¬(∃ z #r. CompromisedSecretChatInitiatorEphemeralKey(z) @r) ∧
        ¬(∃ z #r. CompromisedSecretChatResponderEphemeralKey(z) @r)
        ==>
        (
          /* 
           * then these two clients are actually the two involved in the
           * session key sessionKey negotiation 
           */
          ( iUser1 = iUser2 ∧ rUser1 = rUser2 ) ∨

          /* or they skipped QR validation */
          (
            ∃ x1 x2 #r. 
              OutOfBandKeyComparisonSkipped(x1, x2, sessionKey) @r
          )
        )
    "

  /*
   * Variant of the above.
   */
  lemma LemmaSecretChatAuthentication6:
    "
      ∀ aID bID chatID1 chatID2 iUser1 iUser2 rUser1 rUser2 sessionKey #i #j.
        InitiatorAcceptsEncryptedChat(aID, chatID1, iUser1, rUser1, sessionKey) @i ∧
        ResponderAcceptsEncryptedChat(bID, chatID2, iUser2, rUser2, sessionKey) @j ∧

        /* and no secret was leaked */
        ¬(∃ z #r. CompromisedSecretChatInitiatorEphemeralKey(z) @r) ∧
        ¬(∃ z #r. CompromisedSecretChatResponderEphemeralKey(z) @r)
        ==>
        (
          /* 
           * then these two clients are actually the two involved in the
           * session key sessionKey negotiation 
           */
          ( iUser1 = iUser2 ∧ rUser1 = rUser2 ) ∨

          /* or they skipped QR validation */
          (
            ∃ x1 #r. 
              OutOfBandKeyComparisonSkipped(x1, rUser2, sessionKey) @r
          )
        )
    "


  /*
   * If the clients do not necessarily validate their keys, then the above does
   * not hold. In fact, I, I', R, and R' may be all different (even if the key is
   * the same!).
   *
   * Expected result: False
   * Estimated time: ~30 seconds
   */
  lemma LemmaSecretChatAuthentication7:
    "
      ∀ aID bID chatID iUser1 iUser2 rUser1 rUser2 sessionKey #i #j.

        /*
         * Whenever an initiator and responder have both accepted the same
         * session key sessionKey in the same session
         */
        InitiatorAcceptsEncryptedChat(aID, chatID, iUser1, rUser1, sessionKey) @i ∧
        ResponderAcceptsEncryptedChat(bID, chatID, iUser2, rUser2, sessionKey) @j ∧
        
        /* and no secret was leaked */
        ¬(∃ z #r. CompromisedSecretChatInitiatorEphemeralKey(z) @r) ∧
        ¬(∃ z #r. CompromisedSecretChatResponderEphemeralKey(z) @r)
        ==>
        (
          iUser1 = iUser2 ∨
          rUser1 = rUser2 ∨
          iUser1 = rUser2 ∨
          rUser1 = iUser2
        )
    "
