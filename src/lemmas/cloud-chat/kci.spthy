/*****************************************************************/
/* Key Compromise Impersionation (Client)                        */
/*****************************************************************/


  /*
   * Under no leak of long-term or ephemeral secrets, if an honest client 
   * receives a message encrypted with key k then it was the
   * server who sent it, unless k was revealed by the attacker.
   *
   * This query shows thet key compromise impersonation is trivial: if an
   * authorization key leaks client-side, then the attacker can impersonate the
   * server to that client.
   *
   * Expected result: True
   * Estimated time: ~5 seconds
   */
  lemma LemmaCloudChatKCIClient:
    "
      ∀ sid1 msg authKey #i.
        (
          /* Whenever a client receives a cloud message from the server */
          ClientReceivesCloudMessage(sid1, msg, authKey) @i ∧

          /* and no secret was leaked, but the authorization key authKey */
          ¬(∃ sk #r.   RegisteredAuthKey(sk) @r) ∧
          // ¬(∃ sk #r.   CompromisedAuthKey(sk) @r) ∧
          ¬(∃ skey #r. CompromisedPrivateKey(skey) @r) ∧
          ¬(∃ n #r.    CompromisedNk(n) @r) ∧
          ¬(∃ c #r.    CompromisedClientExponent(c) @r) ∧
          ¬(∃ n c #r.  CompromisedClientEphemeralSecrets(n, c) @r) ∧
          ¬(∃ s #r.    CompromisedServerExponent(s) @r) ∧
          ¬(∃ skey #r. PostCompromisedPrivateKey(skey) @r) ∧
          ¬(∃ n #r.    PostCompromisedNonce(n) @r) ∧
          ¬(∃ c #r.    PostCompromisedClientExponent(c) @r) ∧
          ¬(∃ s #r.    PostCompromisedServerExponent(s) @r)
        )
        ==>
        (
          /* 
           * then it was actually the server who sent the message
           *
           * Note: Trying to prove injectivity seems to make Tamarin use huge
           * amounts of RAM (~12-16 GB) in a very short period of time (~30/40 seconds).
           * Be careful if you uncomment the injectivity check.
           */
          (
            ∃ sid2 #j1. 
              ServerSendsCloudMessage(sid2, msg, authKey) @j1 ∧
              sid1 = sid2 
              // ∧
              // ¬(
              //   ∃ #j2.
              //     ServerSendsCloudMessage(sid2, msg, authKey) @j2 ∧
              //     ¬(#j1 = #j2)
              // )
          ) ∨
          
          /* or the authorization key was actually compromised */
          (∃ #r.   CompromisedAuthKey(authKey) @r)
        )
    "

/*****************************************************************/
/* Key Compromise Impersionation (Server)                        */
/*****************************************************************/

  /*
  * Under "normal circumstances" (no leak of long-term or ephemeral secrets),
  * if an honest client has negotiated key k with the server, and the server
  * receives a message encrypted with k, then it was that client who sent it,
  * unless k was revealed by the attacker.
  *
  * This query shows thet key compromise impersonation is trivial: if an
  * authorization key leaks server-side, then the attacker can impersonate the
  * corresponding client to the server.
  *
  * NOTE: in practice, MTProto2 protects against replay attacks with timestamps 
  * and counters (which are not modeled).
  *
  * Expected result: True
  * Estimated time: ~5 seconds
  */
  lemma LemmaCloudChatKCIServer:
    "
      ∀ nc ns nk sid msg authKey #i #j.
        (
          /* Whenever a client has accepted an authorization key */
          ClientAcceptsAuthKey(nc, ns, nk, authKey) @i ∧

          /* and the server has received a message using such key */
          ServerReceivesCloudMessage(sid, msg, authKey) @j ∧

          /* and no secret was leaked, but the authorization key authKey */
          ¬(∃ sk #r.   RegisteredAuthKey(sk) @r) ∧
          // ¬(∃ sk #r.   CompromisedAuthKey(sk) @r) ∧
          ¬(∃ skey #r. CompromisedPrivateKey(skey) @r) ∧
          ¬(∃ n #r.    CompromisedNk(n) @r) ∧
          ¬(∃ c #r.    CompromisedClientExponent(c) @r) ∧
          ¬(∃ n c #r.  CompromisedClientEphemeralSecrets(n, c) @r) ∧
          ¬(∃ s #r.    CompromisedServerExponent(s) @r) ∧
          ¬(∃ skey #r. PostCompromisedPrivateKey(skey) @r) ∧
          ¬(∃ n #r.    PostCompromisedNonce(n) @r) ∧
          ¬(∃ c #r.    PostCompromisedClientExponent(c) @r) ∧
          ¬(∃ s #r.    PostCompromisedServerExponent(s) @r)
        )
        ==>
        (
          /* then it was actually the client who sent the message */
          (
            ∃ #j1. 
              ClientSendsCloudMessage(sid, msg, authKey) @j1
          ) ∨
          
          /* or the authorization key was actually compromised */
          (∃ #r. CompromisedAuthKey(authKey) @r)
        )
    "