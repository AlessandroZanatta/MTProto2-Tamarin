/*
 * MTProto 2.0: Secret Chats
 *
 * Model for the protocol used in secret chats.
 *
 * See: https://core.telegram.org/api/end-to-end
 */

/*
 * An encrypted chat's messages pass through the server, 
 * who should act as a forwarder. 
 *
 * Each message is encrypted twice: first, with the session key
 * shared only by the two communicating parties; then, with the long-term
 * authorization key of one of the clients.
 *
 * NOTE: in the model the above described double encryption is NOT modeled. This means
 * that authorization keys are considered inherently secure.
 *
 * When the server receives a message from a client A destined to 
 * client B, it decrypts the message using A's long-term shared key
 * (thus retrieving the payload encrypted with the clients's session key)
 * then re-encrypt the message with B's long-term key and sends it to B.
 */

  rule SecretChatInitiator_1 [color=#41A9A9]:
      [
        In(<iUser, rUser>),

        /* Ephemeral key */
        Fr(~i),

        /* Long-term key shared with the server */
        !AuthKeyClient(iUser, $Server, authKey)
      ]
    --[
        ChoosePrincipal(iUser, $Alice, $Bob), 
        /*
         * Client starts a run of the secret chat protocol,
         * identified by the ephemeral key ~i
         */
        InitiatorRequestsDHConfig(~i, iUser)
      ]->
      [ 
        !SecretChatInitiatorEphemeralKey(~i),
        SecretChatInitiatorState_1(iUser, rUser, ~i, authKey),
        Out('GET_DH_CONFIG')
      ]

  rule SecretChatInitiator_1_1 [color=#41A9A9]:
    let
      g_i = 'g' ^ ~i
    in
      [
        SecretChatInitiatorState_1(iUser, rUser, ~i, authKey),
        
        In(<'DH_CONFIG', 'g'>),

        /* Chat identifier */
        Fr(~chatID)
      ]
    --[
        /*
         * Chat's initiator sends a request to start an encrypted chat
         * with another party with chat identified ~chatID
         */
        InitiatorRequestsEncryptedChat(~i, ~chatID, iUser, rUser)
      ]->
      [
        SecretChatInitiatorState_1_1(iUser, rUser, ~i, ~chatID, authKey),
        Out(<'REQI', iUser, rUser, ~chatID, g_i>)
      ]

  rule SecretChatResponder_2 [color=#4C6085]:
      [
        In(rUser),

        /* Ephemeral key */
        Fr(~r),

        /* Long-term key shared with the server */
        !AuthKeyClient(rUser, $Server, authKey)
      ]
    --[
        ChoosePrincipal(rUser, $Alice, $Bob)
      ]->
      [
        SecretChatResponderState_2(rUser, ~r, authKey),
        !SecretChatResponderEphemeralKey(~r)
      ]

  rule SecretChatResponder_2_1 [color=#4C6085]:
      [
        SecretChatResponderState_2(rUser, ~r, authKey),
        
        /* Secret chat initiator request */
        In(<'REQI', iUser, rUser, chatID, g_i>)
      ]
    --[
        /*
         * Client (responder) has received a request to start a chat
         * in chat session ~r with half key g_i
         */
        ResponderReceivesRequestForEncryptedChat(~r, chatID, iUser, rUser, g_i),

        /*
         * Client (responder) has accepted to start a chat session ~r.
         */
        ResponderAcceptsInitiator(~r, chatID, iUser, rUser)
      ]->
      [
        SecretChatResponderState_2_1(iUser, rUser, ~r, chatID, authKey, g_i),
        Out(<'CHAT_ACCEPTED', chatID>)
      ]


  rule SecretChatResponder_2_2 [color=#4C6085]:
    let
      /* Pattern matching for the incoming half key */
      g_i        = 'g' ^ ~i
    
      /* Responder half key and full key */
      g_r        = 'g' ^ ~r
      sessionKey = g_i ^ ~r
      fp         = fps(sessionKey)
    in
      [
        SecretChatResponderState_2_1(iUser, rUser, ~r, chatID, authKey, g_i),
        In(<'DH_CONFIG', 'g'>)
      ]
    --[
        /*
         * Responder has computed session key sessionKey in chat session ~r
         * started by initiator
         */
        ResponderHasSessionKeyForEncryptedChat(~r, chatID, iUser, rUser, sessionKey)
      ]->
      [ 
        SecretChatResponderState_2_2(iUser, rUser, ~r, chatID, authKey, g_i, sessionKey),
        Out(<'ACCEPTR', chatID, iUser, rUser, g_r, fp>),
        !QR(~r, rUser, iUser, sessionKey)
      ]

  rule SecretChatInitiator_3 [color=#41A9A9]:
    let
      g_r = 'g' ^ ~r
      sessionKey = g_r ^ ~i
    in
      [
        SecretChatInitiatorState_1_1(iUser, rUser, ~i, ~chatID, authKey),
        In(<'ACCEPTR', ~chatID, iUser, rUser, g_r, fp>)
      ]
    --[
        /*
         * The session key received in chat session ~i matches/does not match
         * the session key's fingerprint.
         *
         * Lemmas using this fact are supposted to check if third and fourth
         * arguments are actually the same (matches) or not (does not match).
         */
        SessionKeyFingerprintMatches(~i, ~chatID, iUser, rUser, fp, fps(sessionKey)),

        /*
         * Inititator has computed sessione key sessionKey in chat session ~i
         */
        InitiatorHasSessionKeyForEncryptedChat(~i, ~chatID, iUser, rUser, sessionKey)
      ]->
      [
        SecretChatInitiatorState_3(iUser, rUser, ~i, ~chatID, authKey, g_r, sessionKey),
        
        /*
         * Out-of-band comparison of the generated session key is 
         * a crucial step to avoid MitM attacks. This step is 
         * delegated to two rules, one that performs this step 
         * correctly and one that doesn't. 
         *
         * This way we can model a user's misbehaviour.
         */
        !QR(~i, iUser, rUser, sessionKey)
      ]

  rule SecretChatResponder_4 [color=#4C6085]:
      [
        SecretChatResponderState_2_2(iUser, rUser, ~r, chatID, authKey, g_i, sessionKey),
        !QROK(~r, rUser, iUser, sessionKey)
      ]
    --[
        /*
         * Responder has completed session ~r of the secret chat protocol
         * negotiating with initiator a shared key sessionKey
         */
        ResponderAcceptsEncryptedChat(~r, chatID, iUser, rUser, sessionKey)
      ]->
      [
        /* End of the protocol. Used for the rekeying protocol. */
        !SecretChatClient(rUser, iUser, rUser, ~r, chatID, sessionKey, authKey)
      ]

  rule SecretChatInitiator_5 [color=#41A9A9]:
      [
        SecretChatInitiatorState_3(iUser, rUser, ~i, ~chatID, authKey, g_r, sessionKey),
        !QROK(~i, iUser, rUser, sessionKey)
      ]
    --[
        /*
         * Chat initiator has completed session ~i of the secret chat protocol
         * negotiating with responder a shared key sessionKey
         */
        InitiatorAcceptsEncryptedChat(~i, ~chatID, iUser, rUser, sessionKey)
      ]->
      [
        !SecretChatClient(iUser, iUser, rUser, ~i, ~chatID, sessionKey, authKey)
      ]

/*****************************************************************/
/* QR verification rules                                         */
/*****************************************************************/

  rule PerformOutOfBandKeyComparison [color=#99C24D]:
      [ 
        !QR(aID, aUser, bUser, sessionKey),
        !QR(bID, bUser, aUser, sessionKey)
      ]
    --[ 
        /* Rule out the possibility of sessions of a client with itself */
        NotEq(aUser, bUser),

        OutOfBandKeyComparisonSucceeded(aID, aUser, bUser, sessionKey),
        OutOfBandKeyComparisonSucceeded(bID, bUser, aUser, sessionKey)
      ]->
      [
        !QROK(aID, aUser, bUser, sessionKey),
        !QROK(aID, bUser, aUser, sessionKey)
      ]

  rule SkipOutOfBandKeyComparison [color=#99C24D]:
      [ !QR(aID, aUser, bUser, sessionKey) ]
    --[
        OutOfBandKeyComparisonSkipped(aID, aUser, sessionKey)
      ]->
      [ !QROK(aID, aUser, bUser, sessionKey) ]


/*****************************************************************/
/* Secret chat message sending/receiving rules                   */
/*****************************************************************/

  rule SecretChatSend [color=#0088CC]:
    let
      mk  = msgKey(sessionKey, ~m)
      key = kdfKey(sessionKey, mk)
      iv  = kdfIV(sessionKey, mk)

      c   = <keyID(sessionKey), mk, senc(~m, key, iv)>
    in
      [ 
        !SecretChatClient(X, iUser, rUser, xID, chatID, sessionKey, authKey),
        Fr(~m)
      ]
    --[
        ClientSendsSecretChatMsg(chatID, X, iUser, rUser, sessionKey, ~m)
      ]->
      [
        Out(c)
      ]

  rule SecretChatReceive [color=#0088CC]:
    let
      mk  = msgKey(sessionKey, ~m)
      key = kdfKey(sessionKey, mk)
      iv  = kdfIV(sessionKey, mk)

      c   = <keyID(sessionKey), mk, senc(~m, key, iv)>
    in
      [
        !SecretChatClient(X, iUser, rUser, xID, chatID, sessionKey, authKey),
        In(c)
      ]
    --[ ClientReceivesSecretChatMsg(chatID, X, iUser, rUser, sessionKey, ~m) ]->
      []

/*****************************************************************/
/* Other convenience functions                                   */
/*****************************************************************/

  rule GenerateDHConfig [color=#99C24D]:
      []
    -->
      [ Out(<'DH_CONFIG', 'g'>) ]

  /*
   * In the secret chat threat model the authorization key is considered
   * to be secure (i.e. not considered part of the threat model).
   *///  restriction RestrictionChoosePrincipal:
//    "
//      ∀ X Y Z #i.
//        ChoosePrincipal(X, Y, Z) @i ==> ((X = Y) ∨ (X = Z))
//    "
  rule GenerateAuthKey [color=#99C24D]:
    let
      authKey = 'g' ^ ~a ^ ~b
    in
      [ Fr(~a), Fr(~b) ]
    -->
      [ !AuthKeyClient($X, $Server, authKey) ]

/*****************************************************************/
/* Attacker capabilities                                         */
/*****************************************************************/

  rule CompromiseSecretChatInitiatorEphemeralKey [color=#FE4A49]:
      [ !SecretChatInitiatorEphemeralKey(~i) ]
    --[ CompromisedSecretChatInitiatorEphemeralKey(~i) ]->
      [ Out(~i) ]

  rule CompromiseSecretChatResponderEphemeralKey [color=#FE4A49]:
      [ !SecretChatResponderEphemeralKey(~r) ]
    --[ CompromisedSecretChatResponderEphemeralKey(~r) ]->
      [ Out(~r) ]

/*****************************************************************/
/* Other utilities                                               */
/*****************************************************************/
 
  /*
   * Public names cannot be used in lemmas. This rule
   * allows to test for equality on $Alice and $Bob 
   * public names.
   *
   * NOTE: this works because this is the only rule that
   * can create the AliceAndBob fact.
   */
  rule AliceAndBob [color=#99C24D]:
      []
    --[ AliceAndBob($Alice, $Bob) ]->
      []

  restriction RestrictionNotEqual:
    "
      ∀ x y #i.
        NotEq(x, y) @i ==> ¬(x = y)
    "

  restriction RestrictionChoosePrincipal:
    "
      ∀ X Y Z #i.
        ChoosePrincipal(X, Y, Z) @i ==> ((X = Y) ∨ (X = Z))
    "
