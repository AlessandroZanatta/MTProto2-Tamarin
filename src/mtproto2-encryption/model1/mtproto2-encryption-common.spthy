
/*****************************************************************/
/* MTProto 2.0's encryption schema: common definitions           */
/*****************************************************************/

///* 
// * Constructor for an MTProto message 
// * See: https://core.telegram.org/mtproto/description#encrypted-message
// */
//  functions: 
//    /*
//     * Arguments: 
//     *  - an hash value
//     *  - a msg key (128-bit MACs computed from the message and the shared key)
//     *  - a ciphertext
//     * 
//     * Output: an MTProto message
//     */
//    MTPROTO/3,
//    MTPROTO_1/1,
//    MTPROTO_3/1,
//    MTPROTO_2/1
//
//  equations:
//    MTPROTO_1(MTPROTO(a, b, c)) = a,
//    MTPROTO_2(MTPROTO(a, b, c)) = b,
//    MTPROTO_3(MTPROTO(a, b, c)) = c

/*
 * In MTProto, this function computes the 64 lower-order bits of the
 * SHA-1 hash of the input authorization key or session key.
 */
  functions: 
    /*
     * Arguments: 
     *  - a shared key
     *
     * Output: an hash value
     */
    keyID/1

/*
 * In MTProto, the message key is computed as the middle 128 bits of the
 * SHA-256 hash of the concatenation of a fragment of the authorization key
 * and the plaintext, as follows:
 *
 *   msgKey(k,m) := SHA256( k[88+x,120+x) | m | random padding )[8,24)
 *
 * where x=0 for messages from client to server and x=8 for messages from
 * server to client.
 */
  functions:
    /*
     * Arguments:
     *  - a shared key
     *  - a plaintext
     *
     * Output: a msg key (as defined above, 128-bit MACs)
     */
    msgKey/2

  /* Fingerprint of a session key */
  functions: fps/1


/*
 * An ephemeral key and an initialization vector are derived from the
 * authorization key and the message key through a mix of SHA-256, 
 * substring, and concatenation operations.
 */
  functions:
    /* 
     * Arguments:
     *  - a shared key
     *  - a msg key
     *
     * Output: a shared key
     */
    kdfKey/2,

    /*
     * Arguments:
     *  - a shared key
     *  - a msg key
     *
     * Output: a nonce
     */
    kdfIV/2


/*****************************************************************/
/* Asymmetric encryption                                         */
/*****************************************************************/

/* 
 * Deterministic encryption is defined using the 
 * builtin 'asymmetric-encryption'.
 */

/* Probabilistic encryption */
  // functions: RSA_enc/3
  // equations: RSA_dec(internal_RSA_enc(plain, pk(k), r), k) = m

    
/*****************************************************************/
/* Symmetric encryption                                          */
/*****************************************************************/

/*
 * All symmetric encryption in MTProto 2.0 is performed using
 * AES in IGE mode. IGE is described as follows:
 *                  yᵢ = Fₖ(xᵢ ⊗ yᵢ₋₁) ⊗ xᵢ₋₁
 * IGE requires a pair (x₀,y₀) for the first output block, which
 * basically corresponds to the traditional IV.
 *
 * This implementation treats IGE as a perfect primitive, following
 * the usual symbolic approach. A better description of IGE might be
 * achieved (TODO).
 */

  functions: genKey/2, genIV/2, keyID/1
  builtins: symmetric-encryption
/* 
 * Malleability of the ciphertext is *not* modeled.
 * TODO
 */
