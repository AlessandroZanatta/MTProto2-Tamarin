
/*****************************************************************/
/* Boolean types                                                 */
/*****************************************************************/

  functions:
    true/0,
    false/0


/*****************************************************************/
/* Diffie-Hellman with small/bad subgroup attacks.               */
/* See Bhargavan, Blanchet and Kobeissi, 2017.                   */
/*                                                               */
/* WEAK, STRONG and BAD are defined as functions because Tamarin */
/* does not allow the usage of public contants in equations.     */
/*****************************************************************/
 
  /* 
   * Public constants:
   *  - ALLOW_WEAK_DH
   *  - DISALLOW_WEAK_DH
   */

/*****************************************************************/
/* Hash functions, including functions with collisions.          */
/*                                                               */
/* WEAK_HASH, COLLISION and GOOD_HASH are defined as functions   */
/* because Tamarin does not allow the usage of public contants   */
/* in equations.                                                 */
/*****************************************************************/
  
  functions: 
    hash/2,      // Hash function with collisions
    hashIdeal/1, // Perfect hash function
    WEAK_HASH/0,
    COLLISION/0,
    GOOD_HASH/0
  
  equations:
    hash(WEAK_HASH, x) = COLLISION,   // Collision
    hash(GOOD_HASH, x) = hashIdeal(x) // Perfect hash

/*****************************************************************/
/* Other convenience functions                                   */
/*****************************************************************/

//  restriction RestrictionChoosePrincipal:
//    "
//      ∀ X Y Z #i.
//        ChoosePrincipal(X, Y, Z) @i ==> ((X = Y) ∨ (X = Z))
//    "

//  /* Checks if weak DH is allowed or DH parameters are not weak */
//  restriction CheckWeakDHAllowed:
//    "
//      ∀ p g half allowed #i.
//        WeakDHAllowed(p, g, half, allowed) @i
//        ==>
//        (
//          allowed = 'ALLOW_WEAK_DH' ∨
//          (¬(p = WEAK_MODULO) ∧ ¬(g = BAD_ELEMENT) ∧ ¬(half = BAD_ELEMENT))
//        )
//    "

  restriction RestrictionNotEqual:
    "
      ∀ x y #i.
        NotEq(x, y) @i ==> ¬(x = y)
    "
